service:
  name: udagram-sls
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name


# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
#  - serverless-reqvalidator-plugin
#  - serverless-aws-documentation
  - serverless-dynamodb-local
  - serverless-offline

package:
  excludeDevDependencies: true
  individually: true  

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  serverles-offine:
    port: 3003
    
  dynamodb:
    start:
      port: 8000
      inmemory: true
      migrate: true  

  topicName: imagesSnsTopic-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless application for images sharing
    models:
      - name: GroupRequest
        contentType: application/json
        schema: ${file(models/create-groups-request.json)}
      - name: ImageRequest
        contentType: application/json
        schema: ${file(models/create-image-request.json)}  

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  tracing:
    apiGateway: true
    lambda: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    CONNECTIONS_TABLE: Connections-sls-${self:provider.stage} 
    GROUPS_TABLE: Groups-sls-${self:provider.stage}
    IMAGES_TABLE: Images-sls-${self:provider.stage}
    IMAGE_ID_IDX: imageIdIdx-sls
    IMAGES_BUCKET: attachments-sls-${self:provider.stage}
    THUMBNAILS_BUCKET: thumbnail-sls-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
#    AUTH0_SECRET: C9GwgrHyroKmS1l2MD51XiJN0O0L9g-KnKkTg1rQZf6AayqJ9x2Xo8EhwE7xx2kp
    AUTH0_SECRET_ID: Auth0-sls-${self:provider.stage}
    AUTH0_SECRET_FIELD: auth0Secret

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: 
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: 
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
      Resource: 
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGE_ID_IDX}
    - Effect: Allow
      Action:
        - s3:getObject
        - s3:putObject
      Resource: 
        - arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*   
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref Auth0Secret
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: !GetAtt KMSKey.Arn           

functions:
  Auth:
    handler: src/lambda/auth/processor.handler

  AuthSol:
    handler: src/lambda/auth/processorSol.handler
    environment:
      AUTH0_CERT: ''

  getImageUrl:
    handler: src/lambda/http/getSignedUrl.handler
    events:
      - http:
          method: get
          path: signed-url/{fileName}
          cors: true

  getImage:
    handler: src/lambda/http/getImage.handler
    events:
      - http:
          method: get
          path: images/{imageId}
          cors: true

  getGroups:
    handler: src/lambda/http/getGroups.handler
    events:
      - http:
          method: get
          path: groups
          cors: true

  getImages:
    handler: src/lambda/http/getImages.handler
    events:
      - http:
          method: get
          path: groups/{groupId}/images
          cors: true

  createImage:
    handler: src/lambda/http/createImage.handler
    events:
      - http:
          method: post
          path: groups/{groupId}/image
          cors: true
#          authorizer: Auth
          authorizer: AuthSol
          request:  
            schema: 
              application/json: ${file(models/create-image-request.json)}  

  createGroups:
    handler: src/lambda/http/createGroups.handler
    events:
      - http:
          method: post
          path: groups
          cors: true
#          authorizer: Auth
          authorizer: AuthSol
          request:  
            schema: 
              application/json: ${file(models/create-groups-request.json)}

  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: 
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: 
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  WriteToEs:
    handler: src/lambda/elastic/writeToEs.handler
    environment:
      ELASTIC_ENDPOINT: !GetAtt ImagesElSearch.DomainEndpoint
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ImagesDynamoDbTable.StreamArn

  ResizeImage:
    handler: src/lambda/s3/resizeImage.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:getObject
          - s3:putObject
        Resource: 
          - arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*   
          - arn:aws:s3:::${self:provider.environment.THUMBNAILS_BUCKET}/*  

  processFile:
    handler: src/lambda/s3/sendNotifications.handler
    environment:
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    events:
#      - s3: 
#        bucket: ${self:provider.environment.IMAGES_BUCKET}
#        event: s3:ObjectCreated:*
#        existing: true
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName} 

resources:
  Resources:
    ConnectDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}

    GroupDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GROUPS_TABLE}

    ImagesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: imageId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.IMAGE_ID_IDX}
            KeySchema:
              - AttributeName: imageId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.IMAGES_TABLE}
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    ThumbnailsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.THUMBNAILS_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - POST
                - PUT
                - DELETE
                - HEAD
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              MaxAge: 300

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:* 
              Topic: !Ref ImagesSnsTopic
#          LambdaConfigurations:
#          - Event: s3:ObjectCreated:*
#            Function: !GetAtt ProcessFileLambdaFunction.Arn
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - POST
                - PUT
                - DELETE
                - HEAD
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              MaxAge: 300

#    ProcessFilePermission:
#      Type: AWS::Lambda::Permission
#      Properties:
#        FunctionName: !Ref ProcessFileLambdaFunction
#        Principal: s3.amazonaws.com
#        Action: lambda:InvokeFunction
#        SourceAccount: !Ref AWS::AccountId
#        SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: AttachmentsBucketPolicy
          Statement:
            - Sid: PublicReadForAttachmentsBucket
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ImagesSnsTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}
        Topics:
          - !Ref ImagesSnsTopic
    
          
    ImagesElSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: el-search-sls-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'

        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'

    ImagesSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic
        TopicName: ${self:custom.topicName}
        
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

## ToDo try to us a different principal user          
    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH0_SECRET_ID}
        Description: Auth0 secret
        KmsKeyId: !Ref KMSKey
